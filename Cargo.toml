[package]
name = "anyleaf_corvus"
version = "0.1.0"
authors = ["David O'Connor <the_alchemist@fastmail.com>"]
edition = "2021"

[dependencies]
defmt = "^0.3.4"
defmt-rtt = "^0.4.0"
panic-probe = { version = "^0.3.0", features = ["print-defmt"] }

# This critical section prevents a defmt linker error, CAO Dec 2022.
cortex-m = { version = "^0.7.7", features = ["critical-section-single-core"] }
cortex-m-rt = "^0.7.3"

rtic = { version = "^2.0.1", features = ["thumbv7-backend"] }

stm32-hal2 = { path = "../../stm32-hal", optional = true}

# CMSIS-DSP, for FFTs, FIR etc. C lib wrapped with FFI.
# Trouble with LIBCLANG. See this: https://github.com/rust-lang/rust-bindgen/blob/master/book/src/requirements.md
cmsis-dsp-sys = "^0.3.1"
cmsis-dsp-api = { git = "https://github.com/David-OConnor/cmsis-dsp-api"}

lin-alg2 = { path = "../../lin_alg", features = ["no_std"] }
ahrs = { path = "../../ahrs" }

num-traits = { version = "^0.2.15", default_features = false } # Absolute value, powers etc.

cfg-if = "^1.0.0"  # if/else blocks for feature-gating based on flight controller and MCU layout

stm32-usbd = { version = "^0.6.0", optional = true}
synopsys-usb-otg = { version = "^0.3.0", optional = true}
usb-device = "^0.2.9"
usbd-serial = "^0.1.1"

fdcan = "^0.2.0"

# `Chrono` for GNSS timestamp
chrono = { version = "^0.4.23", default-features = false }

packed_struct = {version = "^0.10.1", default_features = false }

# To parse enums from their integer repr
num_enum = { version = "^0.7.0", default_features = false }

dronecan = { path = "../dronecan", optional = true }
anyleaf_usb = { path = "../anyleaf_usb" }

# Use these features to specify GPIO mapping, and which peripherals to use.
[features]
default = ["h7", "quad"]
g4 = ["stm32-hal2/g4rt", "stm32-hal2/g473", "stm32-hal2/usb", "stm32-hal2/can_fd_g", "stm32-usbd", "dronecan/hal_g473"]
h7 = ["stm32-hal2/h7rt", "stm32-hal2/h743v", "stm32-hal2/usbotg_hs", "stm32-hal2/can_fd_h", "synopsys-usb-otg", "dronecan/hal_h7" ]

quad = [] # For quadcopter aircraft
fixed-wing = [] # For fixed-wing aircraft
# Periodically print the status of various sytems and sensor data to console. For debugging.
print-status = []

# cargo build/run
[profile.dev]
codegen-units = 1
debug = 2
debug-assertions = true # <-
incremental = false
opt-level = 3 # <-
overflow-checks = true # <-

# cargo test
[profile.test]
codegen-units = 1
debug = 2
debug-assertions = true # <-
incremental = false
opt-level = 3 # <-
overflow-checks = true # <-

# cargo build/run --release
[profile.release]
codegen-units = 1
debug = 2
debug-assertions = false # <-
incremental = false
lto = 'fat'
opt-level = 3 # <-
overflow-checks = false # <-

# cargo test --release
[profile.bench]
codegen-units = 1
debug = 2
debug-assertions = false # <-
incremental = false
lto = 'fat'
opt-level = 3 # <-
overflow-checks = false # <-