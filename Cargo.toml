[package]
name = "anyleaf_corvus"
version = "0.1.0"
authors = ["David O'Connor <david.alan.oconnor@gmail.com>"]
edition = "2021"

[dependencies]
defmt = "0.3.0"
defmt-rtt = "0.3.0"
panic-probe = { version = "0.3.0", features = ["print-defmt"] }

cortex-m = "0.7.3"
cortex-m-rt = "0.7.0"

cortex-m-rtic = "1.1.3"

#stm32-hal2 = { path = "../../../stm32-hal", optional = true}
stm32-hal2 = { path = "../stm32-hal", optional = true} # temp deployed
#stm32-hal2 = "^1.5.1"

# CMSIS-DSP, for FFTs, FIR etc. C lib wrapped with FFI.
# Trouble with LIBCLANG. See this: https://github.com/rust-lang/rust-bindgen/blob/master/book/src/requirements.md
#cmsis-dsp-sys = "0.3.1"
cmsis-dsp-sys = { git = "https://github.com/jacobrosenthal/cmsis-dsp-sys", branch = "master" }
#cmsis-dsp-api = { path = "../../../cmsis-dsp-api"}
cmsis-dsp-api = { git = "https://github.com/David-OConnor/cmsis-dsp-api" }

lin-alg2 = { path = "../lin_alg", features = ["no_std"]}

num-traits = { version = "0.2.15", default_features = false } # Absolute value, powers etc.

cfg-if = "1.0.0"  # if/else blocks for feature-gating based on flight controller and MCU layout

stm32-usbd = { version = "0.6.0", optional = true}
synopsys-usb-otg = { version = "0.3.0", optional = true}
usb-device = "0.2.8"
usbd-serial = "0.1.1"

# To parse enums from their integer repr
num_enum = { version = "0.5.7", default_features = false }

# Use these features to specify GPIO mapping, and which peripherals to use.
[features]
# We use `mercury-xx` features for board-specific things like pin layout. We use
# `xx` features for STM32-familiy specific things, like PLL config.
mercury-g4 = ["g4"]
mercury-h7 = ["h7"]
g4 = ["stm32-hal2/g4rt", "stm32-hal2/g473", "stm32-hal2/usb", "stm32-usbd"]
h7 = ["stm32-hal2/h7rt", "stm32-hal2/h735", "stm32-hal2/usbotg_hs", "synopsys-usb-otg"]
quad = [] # For quadcopter aircraft
fixed-wing = [] # For fixed-wing aircraft

#default = ["mercury-g4"]

# cargo build/run
[profile.dev]
codegen-units = 1
debug = 2
debug-assertions = true # <-
incremental = false
opt-level = 3 # <-
overflow-checks = true # <-

# cargo test
[profile.test]
codegen-units = 1
debug = 2
debug-assertions = true # <-
incremental = false
opt-level = 3 # <-
overflow-checks = true # <-

# cargo build/run --release
[profile.release]
codegen-units = 1
debug = 2
debug-assertions = false # <-
incremental = false
lto = 'fat'
opt-level = 3 # <-
overflow-checks = false # <-

# cargo test --release
[profile.bench]
codegen-units = 1
debug = 2
debug-assertions = false # <-
incremental = false
lto = 'fat'
opt-level = 3 # <-
overflow-checks = false # <-